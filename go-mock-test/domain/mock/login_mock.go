// Code generated by MockGen. DO NOT EDIT.
// Source: ./ (interfaces: LoginUsecase)
//
// Generated by this command:
//
//	mockgen -destination mock/login_mock.go ./ LoginUsecase
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	domain "go-api-mock-test/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoginUsecase is a mock of LoginUsecase interface.
type MockLoginUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUsecaseMockRecorder
	isgomock struct{}
}

// MockLoginUsecaseMockRecorder is the mock recorder for MockLoginUsecase.
type MockLoginUsecaseMockRecorder struct {
	mock *MockLoginUsecase
}

// NewMockLoginUsecase creates a new mock instance.
func NewMockLoginUsecase(ctrl *gomock.Controller) *MockLoginUsecase {
	mock := &MockLoginUsecase{ctrl: ctrl}
	mock.recorder = &MockLoginUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUsecase) EXPECT() *MockLoginUsecaseMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockLoginUsecase) CreateAccessToken(user *domain.User, secret string, expiry int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", user, secret, expiry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockLoginUsecaseMockRecorder) CreateAccessToken(user, secret, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockLoginUsecase)(nil).CreateAccessToken), user, secret, expiry)
}

// CreateRefreshToken mocks base method.
func (m *MockLoginUsecase) CreateRefreshToken(user *domain.User, secret string, expiry int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", user, secret, expiry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockLoginUsecaseMockRecorder) CreateRefreshToken(user, secret, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockLoginUsecase)(nil).CreateRefreshToken), user, secret, expiry)
}

// GetUserByEmail mocks base method.
func (m *MockLoginUsecase) GetUserByEmail(c context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", c, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockLoginUsecaseMockRecorder) GetUserByEmail(c, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockLoginUsecase)(nil).GetUserByEmail), c, email)
}
